start: module*

module: "module" IDENTIFIER "(" portdeclarations ")" ";" modulestatements "endmodule"

// IMPORTANT: This allows an empty list (i.e. optional)
portdeclarations: (portdeclaration ("," portdeclaration)*)?

portdeclaration: porttype IDENTIFIER

porttype: (INPUT | OUTPUT)

modulestatements: modulestatement*

modulestatement: netdeclaration
               | functiondeclaration
               | netassignment
               | moduleinstantiation

netdeclaration: nettype IDENTIFIER ";" 
              | nettype IDENTIFIER "=" exp ";" -> netdeclaration_assign

nettype: (WIRE | TRI | WAND | WOR | SUPPLY0 | SUPPLY1)

functiondeclaration: "function" IDENTIFIER "(" paramdeclarations ")" ";" functionbody "endfunction"

// IMPORTANT: This allows an empty list (i.e. optional)
paramdeclarations: (paramdeclaration ("," paramdeclaration)*)?

paramdeclaration: porttype IDENTIFIER

functionbody: functionstatement -> functionbody_single
            | "begin" functionstatements "end" -> functionbody_block 
            | -> functionbody_none 

functionstatements: functionstatement*

functionstatement: procedureassignment

variabledeclaration: variabletype IDENTIFIER ";"

variabletype: ( REG | INTEGER )

procedureassignment: IDENTIFIER "=" exp ";"

netassignment: IDENTIFIER "=" exp ";"

moduleinstantiation: IDENTIFIER IDENTIFIER "(" port_assignments ")" ";"

// IMPORTANT: This allows for an empty list of ports
port_assignments: (port_assignment ("," port_assignment)*)?

port_assignment: "." IDENTIFIER "(" IDENTIFIER ")" -> port_assignment_id
               | "." IDENTIFIER "(" exp ")" -> port_assignment_exp

exp: exp "|" exp -> exp_or
   | exp "&" exp -> exp_and
   | exp "^" exp -> exp_xor
   | ("!" | "~") exp -> exp_not
   | exp "==" exp -> exp_eq
   | exp "!=" exp -> exp_neq
   | exp "===" exp -> exp_eq3
   | exp "!==" exp -> exp_neq3
   | exp ">" exp -> exp_gt
   | exp ">=" exp -> exp_gte
   | exp "<" exp -> exp_lt
   | exp "<=" exp -> exp_lte
   | "(" exp ")" -> exp_paren
   | IDENTIFIER "(" exps ")" -> exp_func
   | IDENTIFIER -> exp_id
   | BINARY_CONSTANT -> exp_binary_constant
   | SIGNED_NUMBER -> exp_signed_number

// IMPORTANT: Supports an empty list
exps: (exp ("," exp)* )?

// Using regular expression syntax
IDENTIFIER: /[A-Za-z_][A-Za-z_0-9]*/

WIRE: "wire"
TRI: "tri"
WAND: "wand"
WOR: "wor"
SUPPLY0: "supply0"
SUPPLY1: "supply1"

REG: "reg"
INTEGER: "integer"
INPUT: "input"
OUTPUT: "output"
BINARY_CONSTANT: ("0".."9")+"'b"("0" | "1" | "x" | "z")

%import common.ESCAPED_STRING
%import common.SIGNED_NUMBER
%import common.WS
%import common.CPP_COMMENT
%import common.C_COMMENT

%ignore WS
%ignore CPP_COMMENT
%ignore C_COMMENT
