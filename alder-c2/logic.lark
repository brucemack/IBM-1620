// Lark grammar for simple logic language
// Bruce MacKinnon 7-July-2024

start: program 

program : statement*

statement: assignment ";"
         | declaration ";"

assignment: IDENTIFIER "=" exp -> assignment_eq
          | IDENTIFIER "<=" exp -> assignment_eq2

declaration: INPUT identifierlist -> declaration_input
           | REG identifierlist -> declaration_reg

identifierlist: IDENTIFIER "," identifierlist -> identifierlist_add
              | IDENTIFIER -> identifierlist_start

exp: exp "|" exp -> exp_or
    | exp "&" exp -> exp_and
    | exp "^" exp -> exp_xor
    | ("!" | "~") exp -> exp_not
    | exp ">" exp -> exp_gt
    | exp ">=" exp -> exp_gte
    | exp "<" exp -> exp_lt
    | exp "<=" exp -> exp_lte
    | "(" exp ")" -> exp_paren
    | IDENTIFIER -> exp_id
    | SIGNED_NUMBER -> exp_number

IDENTIFIER: /[A-Za-z_][A-Za-z_0-9]*/
INPUT: "input"
REG: "reg"
WIRE: "wire"

%import common.ESCAPED_STRING
%import common.SIGNED_NUMBER
%import common.WS
%import common.CPP_COMMENT
%import common.C_COMMENT
%ignore WS
%ignore CPP_COMMENT
%ignore C_COMMENT
