// Lark grammar for simple logic language
// Bruce MacKinnon 7-July-2024

start: moduledeclaration*

moduledeclaration: MODULE IDENTIFIER "(" portdeclarationlist ")" ";" statementlist ENDMODULE

portdeclarationlist: portdeclaration "," portdeclarationlist -> portdeclarationlist_add
                   | portdeclaration -> portdeclarationlist_start

portdeclaration: (INPUT | OUTPUT) (WIRE | REG) IDENTIFIER -> portdeclaration_full
               | IDENTIFIER -> portdeclaration_default

statementlist: statement statementlist -> statementlist_add
             | statement -> statementlist_start

statement: declaration -> statement_declaration
         | assignment -> statement_assignment
         | moduleinstantiation -> statement_moduleinstantiation

declaration: WIRE identifierlist ";" -> declaration_wire
           | REG identifierlist ";" -> declaration_reg

assignment: IDENTIFIER "=" exp ";" -> assignment_eq
          | IDENTIFIER "<=" exp ";" -> assignment_eq2

moduleinstantiation: IDENTIFIER IDENTIFIER "(" parameterlist ")" ";"


identifierlist: IDENTIFIER "," identifierlist -> identifierlist_add
              | IDENTIFIER -> identifierlist_start

parameterlist: parameter "," parameterlist -> parameterlist_add
             | parameter -> parameterlist_start

parameter: "." IDENTIFIER "(" exp ")"

exp: exp "|" exp -> exp_or
    | exp "&" exp -> exp_and
    | exp "^" exp -> exp_xor
    | ("!" | "~") exp -> exp_not
    | exp ">" exp -> exp_gt
    | exp ">=" exp -> exp_gte
    | exp "<" exp -> exp_lt
    | exp "<=" exp -> exp_lte
    | "(" exp ")" -> exp_paren
    | IDENTIFIER -> exp_id
    | SIGNED_NUMBER -> exp_number

IDENTIFIER: /[A-Za-z_][A-Za-z_0-9]*/
INPUT: "input"
OUTPUT: "output"
REG: "reg"
WIRE: "wire"
MODULE: "module"
ENDMODULE: "endmodule"

%import common.ESCAPED_STRING
%import common.SIGNED_NUMBER
%import common.WS
%import common.CPP_COMMENT
%import common.C_COMMENT
%ignore WS
%ignore CPP_COMMENT
%ignore C_COMMENT
